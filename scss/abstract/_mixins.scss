@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use 'sass:string';
@use 'sass:list';
@use "sizes" as *;
@use "breakpoints" as *;
@use "functions" as *;
@use "typography" as *;
@use "transitions" as *;
@use "durations" as *;
@use "shadows" as *;

@mixin mq($size, $feature: max-width) {
    // Support for map of conditions (e.g., (min-width: xs, max-width: sm))
    @if meta.type-of($size) == "map" {
        $conditions: ();
        @each $f, $s in $size {
            $breakpoint: if(
                            map.has-key($breakpoints, $s),
                            map.get($breakpoints, $s),
                            $s
            );
            $conditions: list.append($conditions, "(#{$f}: #{$breakpoint})");
        }
        // Join the list into a string with " and "
        $media-query: "";
        @for $i from 1 through list.length($conditions) {
            $media-query: $media-query + list.nth($conditions, $i);
            @if $i < list.length($conditions) {
                $media-query: $media-query + " and ";
            }
        }
        @media screen and #{$media-query} {
            @content;
        }
    }

        // Existing logic for single queries
    @else if map.has-key($breakpoints, $size) {
        $breakpoint: map.get($breakpoints, $size);
        @media screen and (#{$feature}: #{$breakpoint}) {
            @content;
        }
    }
    @else if meta.type-of($size) == number {
        @if math.is-unitless($size) {
            @error "Koristi jedinice (npr. px, em) s brojčanim vrijednostima za @mq()";
        } @else {
            @media screen and (#{$feature}: #{$size}) {
                @content;
            }
        }
    }
    @else {
        @error "Nevažeći parametar za @mq(): #{$size}";
    }
}

@mixin flex($d: null, $jc: null, $ai: null, $g: null, $inline: false) {
    display: if($inline, inline-flex, flex);
    flex-direction: $d;
    justify-content: $jc;
    align-items: $ai;
    gap: $g;
}

@mixin font-face-multi($family, $file-path, $weight: normal) {
    @font-face {
        font-family: $family;
        src: url("#{$file-path}.eot");
        src: url("#{$file-path}.eot?#iefix") format('embedded-opentype'),
        url("#{$file-path}.woff2") format('woff2'),
        url("#{$file-path}.woff") format('woff'),
        url("#{$file-path}.ttf") format('truetype'),
        url("#{$file-path}.svg##{$family}-#{$weight}") format('svg');
        font-weight: $weight;
        font-style: normal;
        font-display: swap;
    }
}

@mixin font-face-single($family, $file-path, $format: 'truetype') {
    @font-face {
        font-family: $family;
        src: url("#{$file-path}") format('#{$format}');
        font-style: normal;
        font-display: swap;
        @content;
    }
}

@mixin loader($bg-clr, $width) {
    content: "";
    position: absolute;
    right: 1rem;
    width: $width;
    padding: 0.25rem;
    aspect-ratio: 1;
    border-radius: 50%;
    background: $bg-clr;
    opacity: 0;
    --_m:
            conic-gradient(#0000 10%,#000),
            linear-gradient(#000 0 0) content-box;
    -webkit-mask: var(--_m);
    mask: var(--_m);
    -webkit-mask-composite: source-out;
    mask-composite: subtract;
    animation: l3 1s infinite linear;
    transition: 150ms ease-in-out;
    z-index: 9999;
    visibility: hidden;
}

@mixin loader-overlay() {
    content: "";
    position: absolute;
    inset: 0;
    background-color: var(--clr-white);
    opacity: 0;
    z-index: 100;
    transition: 150ms ease-in-out;
    visibility: hidden;
}

@mixin icon-x {
    @include flex($jc: center, $ai: center);
    background-color: var(--clr-neutral-400);
    color: var(--clr-neutral-800);
    border-radius: 50%;
    width: size(32);
    height: size(32);
    font-size: fs(250);
    transition: 200ms ease-out;
    cursor: pointer;

    &:hover {
        color: var(--clr-white);
        background-color: var(--clr-neutral-600);
    }
}

@mixin visually-hidden() {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

@mixin transition(
    $properties: (),          // Lista svojstava (obavezna)
    $duration: 'normal',      // Ključ iz $durations ili broj (default: 'normal')
    $timing: null,            // Ključ iz $transitions (opcionalno)
    $content...               // Dodatni CSS blok
) {
    // Automatski postavi 'all' ako nema svojstava
    $resolved-properties: if(list.length($properties) == 0, (all), $properties);

    // Razrješavanje trajanja
    $resolved-duration: if(map.has-key($durations, $duration), map.get($durations, $duration),
            if(
                            meta.type-of($duration) == number and math.unit($duration) != '',
                            $duration,
                            null
            )
    );

    @if $resolved-duration == null {
        @error "Nevažeći duration: #{$duration}. Koristite ključ iz $durations ili broj s jedinicom (npr. 300ms)";
    }

    // Razrješavanje timing funkcije
    $resolved-timing: null;
    @if $timing {
        @if map.has-key($transitions, $timing) {
            $resolved-timing: map.get($transitions, $timing);
        } @else {
            @error "Nevažeći timing: #{$timing}. Dostupne opcije: #{map-keys($transitions)}";
        }
    }

    // Generiranje transition propertyja
    $transitions-list: ();
    @each $prop in $properties {
        $transition: $prop $resolved-duration;
        @if $resolved-timing {
            $transition: $transition $resolved-timing;
        }
        $transitions-list: list.append($transitions-list, $transition, comma);
    }

    transition: $transitions-list;
    @content($content);
}

@mixin box-shadow($size: null, $color: rgba(0, 0, 0, 0.3), $x: null, $y: null, $blur: null, $spread: null, $inset: false) {
    @if $size != null {
        $shadow-values: get-box-shadow($size);
        $inset: if(list.nth($shadow-values, 1) == inset, inset, null);
        $x: list.nth($shadow-values, if($inset != null, 2, 1));
        $y: list.nth($shadow-values, if($inset != null, 3, 2));
        $blur: list.nth($shadow-values, if($inset != null, 4, 3));
        $spread: list.nth($shadow-values, if($inset != null, 5, 4));
    } @else if $x == null or $y == null or $blur == null or $spread == null {
        @error "You must either specify a predefined size or provide x-offset, y-offset, blur-radius, and spread-radius values.";
    }

    box-shadow: #{$inset} #{$x} #{$y} #{$blur} #{$spread} #{$color};
}

@mixin pseudo(
    $loc: before,
    $content: '',
    $pos: absolute,
    $inset: null,
    $top: null,
    $right: null,
    $bottom: null,
    $left: null
) {
    position: relative;

    &::#{$loc} {
        content: $content;
        position: $pos;

        @if $inset != null {
            inset: #{if(math.unit($inset) == "", #{$inset}px, $inset)};
        } @else {
            @if $top != null { top: #{if(math.unit($top) == "", #{$top}px, $top)}; }
            @if $right != null { right: #{if(math.unit($right) == "", #{$right}px, $right)}; }
            @if $bottom != null { bottom: #{if(math.unit($bottom) == "", #{$bottom}px, $bottom)}; }
            @if $left != null { left: #{if(math.unit($left) == "", #{$left}px, $left)}; }
        }

        @content;
    }
}

@mixin text-shadow($size: null, $color: rgba(0, 0, 0, 0.3), $offset-x: null, $offset-y: null, $blur-radius: null) {
    @if $size != null {
        $shadow-values: get-text-shadow($size);
        $offset-x: list.nth($shadow-values, 1);
        $offset-y: list.nth($shadow-values, 2);
        $blur-radius: list.nth($shadow-values, 3);
    } @else if $offset-x == null or $offset-y == null or $blur-radius == null {
        @error "You must either specify a size from the predefined list or provide offset-x, offset-y, and blur-radius values.";
    }

    text-shadow: #{$offset-x} #{$offset-y} #{$blur-radius} #{$color};
}

@mixin responsive-property($property, $base-var, $scale-var) {
    $min-breakpoint: strip-unit(math.div(mq(xxs), 16));
    $max-breakpoint: strip-unit(math.div(mq(xl), 16));
    // Function to check if a string starts with "var(--" and extract the variable name

    // Process variable names
    $base-var-name: extract-var-name($base-var);
    $scale-var-name: extract-var-name($scale-var);

    // Format variables for CSS
    $base-var-css: ensure-var-format($base-var);
    $scale-var-css: ensure-var-format($scale-var);

    // Generate prefix from property name by taking first letter of each word
    $prefix: "";
    $prop-parts: str-split($property, "-");
    @each $part in $prop-parts {
        $prefix: $prefix + string.slice($part, 1, 1);
    }

    // Generate unique variable names
    --#{$prefix}-y2: #{$base-var-css};
    --#{$prefix}-y1: calc(var(--#{$prefix}-y2) / #{$scale-var-css});

    // Convert to unitless (simplified version)
    --#{$prefix}-y1-unitless: tan(atan2(var(--#{$prefix}-y1), var(--base-font-size)));
    --#{$prefix}-y2-unitless: tan(atan2(var(--#{$prefix}-y2), var(--base-font-size)));

    // Fluid formulas
    --#{$prefix}-v: calc(100vw * (var(--#{$prefix}-y2-unitless) - var(--#{$prefix}-y1-unitless)) / (#{$max-breakpoint} - #{$min-breakpoint}));
    --#{$prefix}-r: calc((#{$min-breakpoint} * var(--#{$prefix}-y2) - #{$max-breakpoint} * var(--#{$prefix}-y1)) / (#{$min-breakpoint} - #{$max-breakpoint}));

    // Apply clamp() with custom override
    #{$property}: clamp(var(--#{$prefix}-y1), var(--#{$prefix}-v) + var(--#{$prefix}-r), var(--#{$prefix}-y2));
}